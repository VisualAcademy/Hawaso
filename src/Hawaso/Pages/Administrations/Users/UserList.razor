@* @page "/Administrations/Users"
@page "/Administrations/UserList"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Encodings.Web
@using Hawaso.Areas.Identity.Models
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<ApplicationRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEmailSender _emailSender
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Administrators")]

<h3>User List</h3>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private const string ADMINISTRATION_ROLE = "Administrators";
    private System.Security.Claims.ClaimsPrincipal CurrentUser;
    private ApplicationUser objUser = new();
    private string CurrentUserRole { get; set; } = "Users";
    private List<ApplicationUser> ColUsers = new();
    private List<string> Options = new() { "Users", "Administrators", "HR" };
    private List<string> TenantOptions = new() { "Hawaso", "VisualAcademy", "DotNetNote", "MemoEngine" };
    private string strError = "";
    private bool ShowPopup = false;
    private bool ShowInvitePopup = false;
    private bool ShowPopup2FA = false;
    private bool ShowDeleteConfirmPopup = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        GetUsers();
    }

    private void AddNewUser()
    {
        objUser = new ApplicationUser { Id = "", UserName = objUser.Email, TenantName = "Hawaso" };
        ShowPopup = true;
    }

    private async Task SaveUser()
    {
        try
        {
            if (!string.IsNullOrEmpty(objUser.Id))
            {
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                user.Email = objUser.Email;
                user.FirstName = objUser.FirstName;
                user.LastName = objUser.LastName;
                user.TenantName = objUser.TenantName;
                await _UserManager.UpdateAsync(user);

                if (objUser.PasswordHash != "*****")
                {
                    var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passwordResult = await _UserManager.ResetPasswordAsync(user, resetToken, objUser.PasswordHash);

                    if (!passwordResult.Succeeded)
                    {
                        strError = passwordResult.Errors.FirstOrDefault()?.Description ?? "Password error";
                        return;
                    }
                }

                var userInRole = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
                if (CurrentUserRole == ADMINISTRATION_ROLE && !userInRole)
                {
                    await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
            }
            else
            {
                var newUser = new ApplicationUser
                    {
                        UserName = objUser.Email,
                        Email = objUser.Email,
                        EmailConfirmed = true, // 매뉴얼로 새로운 사용자 생성할 때에는 Email Confirm 기능을 기본값으로 true로 줘서 바로 로그인 가능하도록 설정
                        FirstName = objUser.FirstName,
                        LastName = objUser.LastName,
                        TenantName = objUser.TenantName,
                        RegistrationDate = DateTimeOffset.UtcNow
                    };
                var createResult = await _UserManager.CreateAsync(newUser, objUser.PasswordHash);

                if (!createResult.Succeeded)
                {
                    strError = createResult.Errors.FirstOrDefault()?.Description ?? "Create error";
                    return;
                }

                await _UserManager.AddToRoleAsync(newUser, CurrentUserRole == ADMINISTRATION_ROLE ? ADMINISTRATION_ROLE : CurrentUserRole);
            }

            ShowPopup = false;
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    private async Task SaveUser2FA()
    {
        try
        {
            if (!string.IsNullOrEmpty(objUser.Id))
            {
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                user.Email = objUser.Email;
                user.PhoneNumber = objUser.PhoneNumber;
                user.EmailConfirmed = objUser.EmailConfirmed;
                user.PhoneNumberConfirmed = objUser.PhoneNumberConfirmed;
                user.TwoFactorEnabled = objUser.TwoFactorEnabled;

                await _UserManager.UpdateAsync(user);
            }
            ShowPopup2FA = false;
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    private async Task EditUser(ApplicationUser user)
    {
        objUser = user;
        var userInDb = await _UserManager.FindByIdAsync(user.Id);
        if (userInDb != null)
        {
            CurrentUserRole = await _UserManager.IsInRoleAsync(userInDb, ADMINISTRATION_ROLE) ? ADMINISTRATION_ROLE : "Users";
        }
        ShowPopup = true;
    }

    private void Edit2FA(ApplicationUser user)
    {
        objUser = user;
        ShowPopup2FA = true;
    }

    private void ConfirmDeleteUser(ApplicationUser user)
    {
        objUser = user;
        ShowDeleteConfirmPopup = true;
    }

    private async Task DeleteUser()
    {
        ShowDeleteConfirmPopup = false;
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }
        ShowPopup = false;  // Close the Edit modal
        GetUsers();
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }

    private void ClosePopup2FA()
    {
        ShowPopup2FA = false;
    }

    private void CloseDeleteConfirmPopup()
    {
        ShowDeleteConfirmPopup = false;
    }

    private void GetUsers()
    {
        strError = "";
        ColUsers = _UserManager.Users
            .Select(x => new ApplicationUser
                {
                    Id = x.Id,
                    UserName = x.UserName,
                    Email = x.Email,
                    PasswordHash = "*****",
                    FirstName = x.FirstName,
                    LastName = x.LastName,
                    EmailConfirmed = x.EmailConfirmed,
                    PhoneNumber = x.PhoneNumber,
                    PhoneNumberConfirmed = x.PhoneNumberConfirmed,
                    TwoFactorEnabled = x.TwoFactorEnabled,
                    TenantName = x.TenantName,
                    RegistrationDate = x.RegistrationDate
                })
            .OrderByDescending(x => x.RegistrationDate)
            .ToList();
    }

    private void AddNewUserWithInvite()
    {
        objUser = new ApplicationUser { Id = "", UserName = objUser.Email, TenantName = "Hawaso" };
        ShowInvitePopup = true;
    }

    private async Task SaveUserWithInvite()
    {
        if (string.IsNullOrEmpty(objUser.Id))
        {
            var newUser = new ApplicationUser
                {
                    UserName = objUser.Email,
                    Email = objUser.Email,
                    EmailConfirmed = false, // 이메일을 통해서 새로운 사용자를 추가할 때에는 전송된 링크로 들어와서 가입한 사용자만 이메일 인증 처리 완료
                    FirstName = objUser.FirstName,
                    LastName = objUser.LastName,
                    TenantName = objUser.TenantName,
                    RegistrationDate = DateTimeOffset.UtcNow
                };
            var createResult = await _UserManager.CreateAsync(newUser);

            if (createResult.Succeeded)
            {
                await _UserManager.AddToRoleAsync(newUser, CurrentUserRole);
                await SendInvitationEmail(newUser);
                ShowInvitePopup = false;
                GetUsers();
            }
            else
            {
                strError = "Error creating user";
            }
        }
    }

    private void CloseInvitePopup()
    {
        ShowInvitePopup = false;
    }

    private async Task SendInvitationEmail(ApplicationUser user)
    {
        var code = await _UserManager.GeneratePasswordResetTokenAsync(user);
        var code1 = await _UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        code1 = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code1));

        var callbackUrl = $"{Navigation.BaseUri}Identity/Account/SetPassword?code={code}&code1={code1}";

        var message = $"Please set up your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>Clicking Here</a>." +
                      "<hr />" +
                      $"Or you can copy and paste the following link into your web browser: <br/> {HtmlEncoder.Default.Encode(callbackUrl)}";

        await _emailSender.SendEmailAsync(user.Email, "Welcome to Kodee Portal", message);
    }
}

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="text-center small">First Name</th>
                <th class="text-center small">Last Name</th>
                <th class="text-center small">MFA</th>
                <th class="text-center small">Email</th>
                <th class="text-center small">Email Confirmed</th>
                <th class="text-center small">PhoneNumber</th>
                <th class="text-center small">PhoneNumber Confirmed</th>
                <th class="text-center small">Tenant Name</th>
                <th class="text-center small">Registration Date</th>
                <th class="text-center small" style="width: 150px;">Admin</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in ColUsers)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td class="text-center">
                        <input type="checkbox" checked="@user.TwoFactorEnabled" />
                    </td>
                    <td>@user.Email</td>
                    <td class="text-center">
                        <input type="checkbox" checked="@user.EmailConfirmed" />
                    </td>
                    <td class="small">@user.PhoneNumber</td>
                    <td class="text-center">
                        <input type="checkbox" checked="@user.PhoneNumberConfirmed" />
                    </td>
                    <td class="text-center">@user.TenantName</td>
                    <td class="text-center">@(user.RegistrationDate?.ToString("MM/dd/yyyy") ?? "-")</td>
                    <td style="width: 150px;">
                        <button class="btn btn-primary btn-sm" @onclick="(() => EditUser(user))">Edit</button>
                        <button class="btn btn-primary btn-sm" @onclick="(() => Edit2FA(user))">MFA</button>
                        <button class="btn btn-danger btn-sm" @onclick="(() => ConfirmDeleteUser(user))">DEL</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (ShowInvitePopup)
{
    <div class="modal fade show" tabindex="-1" style="display:block" role="dialog" aria-modal="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Invite New User</h3>
                    <button type="button" class="btn-close" @onclick="CloseInvitePopup"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name:</label>
                        <input id="firstName" class="form-control" type="text" placeholder="First Name" @bind="objUser.FirstName" />
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name:</label>
                        <input id="lastName" class="form-control" type="text" placeholder="Last Name" @bind="objUser.LastName" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email:</label>
                        <input id="email" class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role:</label>
                        <select id="role" class="form-control" @bind="CurrentUserRole">
                            @foreach (var option in Options)
                            {
                                <option value="@option">@option</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="tenant" class="form-label">Tenant Name:</label>
                        <select id="tenant" class="form-control" @bind="objUser.TenantName">
                            @foreach (var tenant in TenantOptions)
                            {
                                <option value="@tenant">@tenant</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary w-50" @onclick="SaveUserWithInvite">Send Invitation</button>
                        <button class="btn btn-secondary" @onclick="CloseInvitePopup">Cancel</button>
                    </div>
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowPopup)
{
    <div class="modal fade show" tabindex="-1" style="display:block" role="dialog" aria-modal="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Add/Edit User</h3>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(objUser.Id))
                    {
                        <p>
                            @objUser.UserName
                            &nbsp;&nbsp;
                            @if (!string.IsNullOrEmpty(objUser.Id))
                            {
                                <button class="btn btn-sm btn-danger" @onclick="(() => ConfirmDeleteUser(objUser))">Delete This User</button>
                            }
                        </p>
                    }
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name:</label>
                        <input id="firstName" class="form-control" type="text" placeholder="First Name" @bind="objUser.FirstName" />
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name:</label>
                        <input id="lastName" class="form-control" type="text" placeholder="Last Name" @bind="objUser.LastName" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email:</label>
                        <input id="email" class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <input id="password" class="form-control" type="password" placeholder="Password" @bind="objUser.PasswordHash" />
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role:</label>
                        <select id="role" class="form-control" @bind="CurrentUserRole">
                            @foreach (var option in Options)
                            {
                                <option value="@option">@option</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="tenant" class="form-label">Tenant Name:</label>
                        <select id="tenant" class="form-control" @bind="objUser.TenantName">
                            @foreach (var tenant in TenantOptions)
                            {
                                <option value="@tenant">@tenant</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary w-50" @onclick="SaveUser">Save</button>
                        <button class="btn btn-secondary" @onclick="ClosePopup">Cancel</button>
                    </div>
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowDeleteConfirmPopup)
{
    <div class="modal fade show" tabindex="-1" style="display:block" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Confirm Delete</h3>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmPopup"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this user?</p>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                        <button class="btn btn-secondary" @onclick="CloseDeleteConfirmPopup">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<button class="btn btn-success" @onclick="AddNewUser">Create New User Account</button>
<button class="btn btn-success" @onclick="AddNewUserWithInvite">Invite New User via Email</button>

@if (ShowPopup2FA)
{
    <div class="modal fade show" tabindex="-1" style="display:block" role="dialog" aria-modal="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">MFA Setting</h3>
                    <button type="button" class="btn-close" @onclick="ClosePopup2FA"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email:</label>
                        <input id="email" class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                    </div>
                    <div class="mb-3">
                        <label for="emailConfirmed" class="form-label">Email Confirmed:</label>
                        <input id="emailConfirmed" type="checkbox" @bind="objUser.EmailConfirmed" />
                    </div>
                    <div class="mb-3">
                        <label for="phone" class="form-label">Phone:</label>
                        <input id="phone" class="form-control" type="text" placeholder="Phone" @bind="objUser.PhoneNumber" />
                    </div>
                    <div class="mb-3">
                        <label for="phoneConfirmed" class="form-label">Phone Confirmed:</label>
                        <input id="phoneConfirmed" type="checkbox" @bind="objUser.PhoneNumberConfirmed" />
                    </div>
                    <div class="mb-3">
                        <label for="mfaEnabled" class="form-label">MFA Enabled:</label>
                        <input id="mfaEnabled" type="checkbox" @bind="objUser.TwoFactorEnabled" />
                    </div>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-danger w-50" @onclick="SaveUser2FA">Update</button>
                        <button class="btn btn-secondary" @onclick="ClosePopup2FA">Cancel</button>
                    </div>
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}
 *@