@page "/Manufacturers"
@using Hawaso.Models
@inject IManufacturerRepository repository
@inject IJSRuntime JS
@using Dul.Web

@* Open XML SDK *@
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet

@attribute [AllowAnonymous]
@attribute [Authorize(Roles = "Administrators")]

@inject IToastService toastService

<PageTitle>제조사 리스트 | Hawaso</PageTitle>

<div class="container-fluid">
    <div class="animated fadeIn">

        <div class="card">

            <div class="card-body">

                <h3>Manufacturer List</h3>

                <p>제조사 목록을 관리합니다.</p>

                @if (manufacturers == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="text-nowrap text-center">ID</th>
                                    <th class="text-nowrap text-center">Name</th>
                                    <th class="text-nowrap text-center">Manufacturer Code</th>
                                    <th class="text-nowrap text-center">Comment</th>
                                    <th class="text-nowrap text-center">Edit</th>
                                    <th class="text-nowrap text-center">Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var manufacturer in manufacturers)
                                {
                                    <tr>
                                        <td class="text-nowrap text-center">@manufacturer.Id</td>
                                        <td class="text-nowrap text-center">@manufacturer.Name</td>
                                        <td class="text-nowrap text-center">@manufacturer.ManufacturerCode</td>
                                        <td class="text-nowrap text-center">@manufacturer.Comment</td>
                                        <td class="text-nowrap text-center">
                                            <input type="button" value="Edit" class="btn btn-primary"
                                                   data-toggle="modal" data-target="#manufacturerEditorDialog"
                                                   @onclick="(() => EditBy(manufacturer))" />
                                        </td>
                                        <td class="text-nowrap text-center">
                                            <input type="button" value="Delete" class="btn btn-danger"
                                                   @onclick="(() => DeleteBy(manufacturer))"
                                                   data-toggle="modal" data-target="#manufacturerDeleteDialog" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                <ManufacturerPager Model="pager" PageIndexChanged="PageIndexChanged"></ManufacturerPager>

                <div>
                    <input type="button" value="Add"
                           data-toggle="modal" data-target="#manufacturerEditorDialog"
                           class="btn btn-primary" @onclick="(() => btnCreate_Click())" />

                    <button class="btn btn-primary pull-right" @onclick="DownloadFile">Download</button>
                </div>

                <ManufacturerDeleteDialog OnClick="btnDelete_Click"></ManufacturerDeleteDialog>

                <ManufacturerEditorForm EditorModel="@manufacturer" SaveOrUpdated="@SaveOrUpdated">
                    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
                </ManufacturerEditorForm>

            </div>
        </div>
    </div>
</div>

@code {
    private PagerBase pager = new PagerBase()
    {
        PageNumber = 1,
        PageIndex = 0,
        PageSize = 20,
        PagerButtonCount = 5
    };

    private string editorFormTitle = "";
    private List<Manufacturer> manufacturers;
    private Manufacturer manufacturer = new Manufacturer(); // 선택한 항목 관리

    protected void btnCreate_Click()
    {
        editorFormTitle = "Create";
        manufacturer = new Manufacturer(); // 모델 클리어
    }

    protected override async Task OnInitializedAsync()
    {
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        manufacturers = pagingData.Records.ToList();
    }

    protected async Task btnDelete_Click()
    {
        await repository.DeleteManufacturerAsync(manufacturer.Id); // 삭제
        await JS.InvokeAsync<object>("closeModal", "manufacturerDeleteDialog");
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        manufacturers = pagingData.Records.ToList();
        manufacturer = new Manufacturer(); // 선택 항목 초기화

        toastService.ShowError("삭제되었습니다.");
    }

    private void DeleteBy(Manufacturer manu)
    {
        manufacturer = manu;
    }

    private void EditBy(Manufacturer manu)
    {
        editorFormTitle = "Edit";
        manufacturer = manu;
    }

    // 등록 또는 수정 후 현재 페이지 다시 로드
    private async void SaveOrUpdated()
    {
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        manufacturers = pagingData.Records.ToList();

        StateHasChanged();
    }

    // 페이저 버튼 클릭 콜백 메서드
    private async void PageIndexChanged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = (pageIndex + 1);

        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        manufacturers = pagingData.Records.ToList();

        StateHasChanged(); // 현재 컴포넌트 재로드
    }

    // ===== Excel (OpenXML) =====
    private void DownloadFile()
    {
        if (manufacturers is null || manufacturers.Count == 0)
        {
            toastService?.ShowWarning("내려받을 데이터가 없습니다.");
            return;
        }

        byte[] bytes;
        using (var ms = new MemoryStream())
        {
            using (var doc = SpreadsheetDocument.Create(ms, SpreadsheetDocumentType.Workbook, true))
            {
                var wbPart = doc.AddWorkbookPart();
                wbPart.Workbook = new Workbook();

                var wsPart = wbPart.AddNewPart<WorksheetPart>();
                var sheetData = new SheetData();
                wsPart.Worksheet = new Worksheet(sheetData);

                var sheets = wbPart.Workbook.AppendChild(new Sheets());
                sheets.Append(new Sheet
                {
                    Id = wbPart.GetIdOfPart(wsPart),
                    SheetId = 1U,
                    Name = "Manufacturers"
                });

                // Header
                uint headerRowIndex = 1;
                var headerRow = new Row { RowIndex = headerRowIndex };
                sheetData.Append(headerRow);

                string[] headers = { "Id", "Name", "ManufacturerCode", "Comment" };
                for (int i = 0; i < headers.Length; i++)
                {
                    headerRow.Append(TextCell(Ref(i + 1, (int)headerRowIndex), headers[i]));
                }

                // Data
                uint rowIndex = 2;
                foreach (var m in manufacturers)
                {
                    var row = new Row { RowIndex = rowIndex };
                    sheetData.Append(row);

                    var values = new[]
                    {
                        m.Id.ToString(),
                        m.Name ?? string.Empty,
                        m.ManufacturerCode ?? string.Empty,
                        m.Comment ?? string.Empty
                    };

                    for (int i = 0; i < values.Length; i++)
                    {
                        row.Append(TextCell(Ref(i + 1, (int)rowIndex), values[i]));
                    }

                    rowIndex++;
                }

                wsPart.Worksheet.Save();
                wbPart.Workbook.Save();
            }

            bytes = ms.ToArray();
        }

        FileUtil.SaveAs(JS, $"{DateTime.Now:yyyyMMddhhmmss}_Manufacturers.xlsx", bytes);
    }

    // OpenXML helpers
    private static Cell TextCell(string cellRef, string text) =>
        new Cell
        {
            CellReference = cellRef,
            DataType = CellValues.String,
            CellValue = new CellValue(text ?? string.Empty)
        };

    private static string Ref(int col1Based, int row) => $"{ColName(col1Based)}{row}";

    private static string ColName(int index)
    {
        var dividend = index; // 1 -> A
        string col = string.Empty;
        while (dividend > 0)
        {
            var modulo = (dividend - 1) % 26;
            col = (char)('A' + modulo) + col;
            dividend = (dividend - modulo) / 26;
        }
        return col;
    }
}
